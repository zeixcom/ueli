@use 'true' as *;

// stylelint-disable length-zero-no-unit
$mq-breakpoints: (
  xs: 0px,
  sm: 600px,
  md: 900px,
  lg: 1200px,
  xl: 1500px,
);
// stylelint-enable length-zero-no-unit

$fluid-breakpoints: (
  min: sm,
  max: xl,
);

// Enable fluid scaling
$fluid-scaling: true;

@import './scss/01-tools/functions';
@import './scss/01-tools/mixins';

// ============================================================================
// Function: modular-scale-config
// ============================================================================
@include describe('[function] modular-scale-config') {
  @include describe('Given an exponent, a fixed size and a fixed base') {
    @include it('Should output the scaled value') {
      @include assert-equal(modular-scale-config(2, 3, 1.2), 4.32);
    }
  }

  @include describe('Given an exponent, a fluid size and a fixed base') {
    @include it('Should output a sizing map') {
      @include assert-equal(
        modular-scale-config(
          2,
          (
            'min': 5px,
            'max': 50px,
          ),
          1.2
        ),
        (
          'min': 7.2px,
          'max': 72px,
        )
      );
    }
  }

  @include describe('Given an exponent, fluid size and a fluid base') {
    @include it('Should output a sizing map') {
      @include assert-equal(
        modular-scale-config(
          2,
          (
            'min': 5px,
            'max': 50px,
          ),
          (
            'min': 1.2,
            'max': 1.5,
          )
        ),
        (
          'min': 7.2px,
          'max': 112.5px,
        )
      );
    }
  }

  @include describe('Given an exponent, a fixed size and a breakpoint map base') {
    @include it('Should output a breakpoint map') {
      @include assert-equal(
        modular-scale-config(
          2,
          5px,
          (
            'xs': 5,
            'sm': 8,
            'md': 18,
          )
        ),
        (
          'xs': 125px,
          'sm': 320px,
          'md': 1620px,
        )
      );
    }
  }

  @include describe('Given an exponent, a fixed size and a fluid base') {
    @include it('Should output a sizing map') {
      @include assert-equal(
        modular-scale-config(
          2,
          5px,
          (
            'min': 5,
            'max': 50,
          )
        ),
        (
          'min': 125px,
          'max': 12500px,
        )
      );
    }
  }

  @include describe('Given an exponent, breakpoint map size and a fixed base') {
    @include it('Should output a breakpoint map') {
      @include assert-equal(
        modular-scale-config(
          2,
          (
            'xs': 5px,
            'sm': 8px,
            'md': 18px,
          ),
          12
        ),
        (
          'xs': 720px,
          'sm': 1152px,
          'md': 2592px,
        )
      );
    }
  }

  @include describe('Given an exponent, breakpoint map size and breakpoint map base') {
    @include it('Should output a breakpoint map') {
      @include assert-equal(
        modular-scale-config(
          2,
          (
            'xs': 5px,
            'sm': 8px,
            'md': 18px,
          ),
          (
            'xs': 2,
            'sm': 4,
            'md': 9,
          )
        ),
        (
          'xs': 20px,
          'sm': 128px,
          'md': 1458px,
        )
      );
    }
  }

  @include describe(
    'Given an exponent, a breakpoint map with a fluid value size and a fluid value base'
  ) {
    @include it('Should output a breakpoint map with a sizing map as value') {
      @include assert-equal(
        modular-scale-config(
          2,
          (
            'xs': 5px,
            'sm': 8px,
            'md': (
              'min': 8px,
              'max': 20px,
            ),
          ),
          (
            'xs': 2,
            'sm': 4,
            'md': (
              'min': 1.2,
              'max': 1.5,
            ),
          )
        ),
        (
          'xs': 20px,
          'sm': 128px,
          'md': (
            'min': 11.52px,
            'max': 45px,
          ),
        )
      );
    }
  }

  @include describe('Given an exponent, a breakpoint map with a fluid value size and a fixed base') {
    @include it('Should output a breakpoint map with a sizing map as value') {
      @include assert-equal(
        modular-scale-config(
          2,
          (
            'xs': 5px,
            'sm': 8px,
            'md': (
              'min': 8px,
              'max': 20px,
            ),
          ),
          2
        ),
        (
          'xs': 20px,
          'sm': 32px,
          'md': (
            'min': 32px,
            'max': 80px,
          ),
        )
      );
    }
  }

  @include describe('Given an exponent, a fixed size and a fluid value base') {
    @include it('Should output a breakpoint map with a sizing map as value') {
      @include assert-equal(
        modular-scale-config(
          2,
          5px,
          (
            'xs': 2,
            'sm': 4,
            'md': (
              'min': 1.2,
              'max': 1.5,
            ),
          )
        ),
        (
          'xs': 20px,
          'sm': 80px,
          'md': (
            'min': 7.2px,
            'max': 11.25px,
          ),
        )
      );
    }
  }
}
