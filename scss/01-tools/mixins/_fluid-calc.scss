////
/// @group sizing
////

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '~sass-mq/mq' as *;

/// Generate min, max and fluid in-between values for a given CSS property
///
/// @param {String|List} $prop - Any CSS property or a list of CSS properties
/// @param {Map|Number|List} $sizes - Map of two sizes formatted as `(min: x, max: y)`, list of two sizes formatted as `(x, y)` or just a number (min size)
/// @param {Map} $breakpoints [$fluid-breakpoints] - Map of two named breakpoints from `$mq-breakpoints` formatted as `(min: md, max: lg)` or custom px values formatted as `(min: 600px, max: 900px)`
/// @param {Bool} $negative [false] - Negates the values if true
/// @param {Bool} $important [false] - Adds important flag if true
/// @param {String} $current-breakpoint [null]
/// @param {List} $all-breakpoints [null]
@mixin fluid-calc(
  $prop,
  $sizes,
  $breakpoints: $fluid-breakpoints,
  $negative: false,
  $important: false,
  $current-breakpoint: null,
  $all-breakpoints: null
) {
  $min-size: null;
  $max-size: null;
  $min-breakpoint: map.get($breakpoints, 'min');
  $max-breakpoint: map.get($breakpoints, 'max');
  $min-breakpoint-value: $min-breakpoint;
  $max-breakpoint-value: $max-breakpoint;

  @if (meta.type-of($sizes) == 'map') {
    $min-size: map.get($sizes, 'min');
    $max-size: map.get($sizes, 'max');
  } @else if (meta.type-of($sizes) == 'list') {
    $min-size: list.nth($sizes, 1);
    $max-size: list.nth($sizes, 2);
  } @else if (meta.type-of($sizes) == 'number') {
    $min-size: $sizes;
  }

  @if map.has-key($mq-breakpoints, $min-breakpoint) {
    $min-breakpoint-value: map.get($mq-breakpoints, $min-breakpoint);
  }

  @if map.has-key($mq-breakpoints, $max-breakpoint) {
    $max-breakpoint-value: map.get($mq-breakpoints, $max-breakpoint);
  }

  @if $min-size {
    $min-size: to-rem($min-size);

    @if (
      not
        $current-breakpoint or
        ($current-breakpoint == list.nth($all-breakpoints, 1)) or
        ($current-breakpoint == list.nth($all-breakpoints, list.length($all-breakpoints))) and not
        $max-size
    ) {
      @include output-props($prop, $min-size, $negative, $important);
    }

    @if ($max-size and $max-breakpoint-value) {
      $max-size: to-rem($max-size);

      @if ($fluid-scaling and $min-breakpoint-value) {
        $multiplicand: 1;

        @if $negative {
          $multiplicand: -1;
        }

        $diff-sizes: strip-unit($max-size - $min-size);
        $diff-breakpoints: strip-unit(
          to-rem($max-breakpoint-value) - to-rem($min-breakpoint-value)
        );

        // prettier-ignore
        $value: calc((#{$min-size} + #{$diff-sizes} * (100vw - #{to-rem($min-breakpoint-value)}) / #{$diff-breakpoints}) * #{$multiplicand});

        @if $current-breakpoint {
          // Breakpoint set already in parent mixin (loop-variation)
          @include output-props($prop, $value, false, $important);
        } @else {
          @include mq($min-breakpoint-value) {
            @include output-props($prop, $value, false, $important);
          }
        }
      }

      @if (
        not
          $current-breakpoint or
          ($current-breakpoint == list.nth($all-breakpoints, list.length($all-breakpoints)))
      ) {
        @include mq($max-breakpoint-value) {
          @include output-props($prop, $max-size, $negative, $important);
        }
      }
    }
  }
}
