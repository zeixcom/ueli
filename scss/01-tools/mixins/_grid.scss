////
/// @group grid
////

@use 'sass:math';

/// Output a css grid row with auto fit sizing and gutters
///
/// @example scss
/// .grid-row-auto {
///   @include grid-row-auto(320px);
/// }
/// @param {Number|Map} $gutter [$grid-gutter] - The amount of gutter as number, breakpoint map `(xs: 30px, md: 60px)` or sizing map (min: 30px, max: 60px)
/// @param {Number} $min-size - Minimum size of the grid columns
@mixin grid-row-auto($min-size, $gutter: $grid-gutter) {
  @include gutter($gutter, 'gap');

  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(Min(100%, var(--min, #{$min-size})), 1fr));
}

/// Output a css grid row with gutters
///
/// @example scss
/// .grid-row {
///   @include grid-row();
/// }
/// @param {Number|Map} $gutter [$grid-gutter] - The amount of gutter as number, breakpoint map `(xs: 30px, md: 60px)` or sizing map (min: 30px, max: 60px)
@mixin grid-row($gutter: $grid-gutter) {
  @include gutter($gutter, 'gap');

  display: grid;
  grid-template-rows: repeat(var(--rows, 1), 1fr);
  grid-template-columns: repeat(var(--columns, #{$grid-columns}), 1fr);
}

/// Output a css grid column
///
/// @example scss
/// .grid-col {
///   @include grid-column(6);
/// }
/// @param {Number} $span [$grid-columns] - Grid column span
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin grid-column($span: $grid-columns, $columns: $grid-columns) {
  @if (math.unit($span) == '%') {
    $span: strip-unit(math.div($span * $columns, 100));

    @if (math.ceil($span) != $span) {
      @error "Percentage value is not compatible with #{$columns} columns.";
    }
  }

  @if ($span > 0 and $span <= $columns) {
    grid-column: auto / span $span;
  } @else {
    @error "Use a span value within the range of 1 and #{$grid-columns}.";
  }
}

/// Output a css grid column start offset
///
/// @example scss
/// .grid-col-offset {
///   @include grid-column-start(2);
/// }
/// @param {Number} $span - Grid column start offset
@mixin grid-column-start($span, $columns: $grid-columns) {
  @if ($span > 0 and $span <= $columns) {
    grid-column-start: $span;
  } @else {
    @error "Use a span value within the range of 1 and #{$grid-columns}.";
  }
}

// Generate grid columns for a specific breakpoint
///
/// @param {String} $breakpoint - Named breakpoint key of `$mq-breakpoints`
@mixin generate-grid-columns($breakpoint) {
  @for $i from 1 through $grid-columns {
    $col-base: 'grid-col';

    @if (not is-first-breakpoint($breakpoint)) {
      $col-base: $col-base + '-' + $breakpoint;
    }

    .#{$col-base}-#{$i} {
      @include grid-column($i, $grid-columns);
    }
  }

  @for $i from 1 through $grid-columns {
    $col-base: 'grid-col-start';

    @if (not is-first-breakpoint($breakpoint)) {
      $col-base: $col-base + '-' + $breakpoint;
    }

    @if $i < $grid-columns {
      .#{$col-base}-#{$i} {
        @include grid-column-start($i, $grid-columns);
      }
    }
  }
}
