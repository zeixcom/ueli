////
/// @group grid
////

@use 'sass:math';

/// Output flex column base styles with gutter
///
/// @param {Number|Map} $gutter [$grid-gutter] - The amount of gutter as number, breakpoint map `(xs: 30px, md: 60px)` or sizing map (min: 30px, max: 60px)
/// @param {Number} $size [100%] - Width of the column as number
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin flex-column-base($gutter: $grid-gutter, $size: 100%, $columns: $grid-columns) {
  @include gutter($gutter, 'padding');
  @include flex-column($size, $columns);

  position: relative;
}

/// Output flex column width modifier styles
///
/// @param {Number|String} $size ['expand'] - Column size as number (e.g. 20% or 0.2) or string ('expand' or 'shrink')
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin flex-column($size: 'expand', $columns: $grid-columns) {
  @if $size {
    @if (type-of($size) == 'number') {
      @if (unit($size) == '%') {
        width: $size;
      } @else {
        @if $size < 1 {
          width: percentage($size);
        } @else {
          width: percentage(math.div($size, $columns));
        }
      }
    } @else {
      width: auto;
      max-width: 100%;

      @if $size == 'shrink' {
        flex: 0 0 auto;
      }

      @if $size == 'expand' {
        flex: 1 1 auto;
      }
    }
  }
}

/// Output flex column push styles
///
/// @param {Number} $size - Column size as number of columns
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin flex-column-push($size, $columns: $grid-columns) {
  @if $size > 0 {
    left: percentage(math.div($size, $columns));
  } @else {
    left: auto;
  }
}

/// Output flex column pull styles
///
/// @param {Number} $size - Column size as number of columns
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin flex-column-pull($size, $columns: $grid-columns) {
  @if $size > 0 {
    right: percentage(math.div($size, $columns));
  } @else {
    right: auto;
  }
}

/// Output flex column offset styles
///
/// @param {Number} $size - Column size as number of columns
/// @param {Number} $columns [$grid-columns] - Number of grid columns
@mixin flex-column-offset($size, $columns: $grid-columns) {
  @if $size < $columns {
    margin-left: percentage(math.div($size, $columns));
  }
}

// Generate columns for a specific breakpoint
///
/// @param {String} $breakpoint - Breakpoint name
@mixin generate-flex-columns($breakpoint) {
  @for $i from 0 through $grid-columns {
    $col-base: 'col';

    @if (not is-first-breakpoint($breakpoint)) {
      $col-base: $col-base + '-' + $breakpoint;
    }

    @if $i > 0 {
      .#{$col-base}-#{$i} {
        @include flex-column($i, $grid-columns);
      }
    }

    .#{$col-base}-pull-#{$i} {
      @include flex-column-pull($i, $grid-columns);
    }

    .#{$col-base}-push-#{$i} {
      @include flex-column-push($i, $grid-columns);
    }

    .#{$col-base}-offset-#{$i} {
      @include flex-column-offset($i, $grid-columns);
    }
  }
}
