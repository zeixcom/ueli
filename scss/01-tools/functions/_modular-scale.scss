////
/// @group typography
////

@use 'sass:math';

/// Scale a single value or map values using the passed exponent and type scale
///
/// @param {Number} $exp - Exponent
/// @param {Number|Map} $size [$font-size-base] - Size to scale
/// @param {Number|Map} $type-scale [$type-scale] - Type scale as a single value (e.g 1.2) or breakpoint map formatted as `(xs: 1.2, md: 1.333)`
/// @return {Number|Map} - Scaled value or map
@function modular-scale-config($exp, $size: $font-size-base, $type-scale: $type-scale) {
  @if is-sizing-map($size) {
    @if is-breakpoint-map($type-scale) {
      @error "Config mismatch: Must use a breakpoint map for `$size` in order to use breakpoints in `$type-scale`.";
    } @else if (is-sizing-map($type-scale) and not (length($type-scale) == length($size))) {
      @error "Config mismatch: Must use the same keys in sizing maps for `$size` and `$type-scale`.";
    }

    @each $sizing-key, $sizing-value in $size {
      $sizing-type-scale: $type-scale;

      // If $type-scale is a sizing map too, then use the corresponding value
      @if is-sizing-map($type-scale) {
        // Check key, because 'max' key could be missing from sizing map
        @if map-has-key($type-scale, $sizing-key) {
          $sizing-type-scale: map-get($type-scale, $sizing-key);
        }
      }

      // Replace sizing map values with modular scaled values
      $size: map-merge(
        $size,
        (
          $sizing-key: modular-scale($exp, $sizing-value, $sizing-type-scale),
        )
      );
    }
  } @else if is-breakpoint-map($size) {
    @each $breakpoint-key, $breakpoint-value in $size {
      $breakpoint-type-scale: $type-scale;

      // Use type scale of the matching breakpoint if configured
      @if is-breakpoint-map($type-scale) {
        @if map-has-key($type-scale, $breakpoint-key) {
          $breakpoint-type-scale: map-get($type-scale, $breakpoint-key);
        } @else {
          @error "Config mismatch: Breakpoint key `#{$breakpoint-key}` was not found in `$type-scale`.";
        }
      } @else if is-sizing-map($type-scale) {
        @error "Config mismatch: Must use a breakpoint map for `$type-scale` in order to use breakpoints in `$size`.";
      }

      // Replace breakpoint values with modular scaled value
      // Use recursive call because $breakpoint-value or $breakpoint-type-scale could be a sizing map
      $size: map-merge(
        $size,
        (
          $breakpoint-key: modular-scale-config($exp, $breakpoint-value, $breakpoint-type-scale),
        )
      );
    }
  } @else {
    @if is-breakpoint-map($type-scale) {
      $size-map: ();

      @each $breakpoint-key, $breakpoint-value in $type-scale {
        // Replace breakpoint values for type scale with modular scaled value
        // Use recursive call because $breakpoint-value could be a sizing map
        $size-map: map-merge(
          $size-map,
          (
            $breakpoint-key: modular-scale-config($exp, $size, $breakpoint-value),
          )
        );
      }

      $size: $size-map;
    } @else if is-sizing-map($type-scale) {
      $size-map: ();

      @each $sizing-key, $sizing-value in $type-scale {
        // Replace sizing map values for type scale with modular scaled values
        $size-map: map-merge(
          $size-map,
          (
            $sizing-key: modular-scale($exp, $size, $sizing-value),
          )
        );
      }

      $size: $size-map;
    } @else {
      $size: modular-scale($exp, $size, $type-scale);
    }
  }

  @return $size;
}

/// Scale a value according to the passed exponent and type scale
///
/// @param {Number} $exp - Exponent
/// @param {Number} $size [$font-size-base] - Size to scale
/// @param {Number} $type-scale [$type-scale] - Type scale (e.g 1.2)
/// @return {Number} - Scaled value
@function modular-scale($exp, $size: $font-size-base, $type-scale: $type-scale) {
  @return math.pow($type-scale, $exp) * $size;
}
