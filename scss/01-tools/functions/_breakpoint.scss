////
/// @group breakpoint
////

/// Get the first breakpoint from the map
///
/// @param {Map} $breakpoints [$mq-breakpoints] - Map of breakpoints
/// @return {Boolean} - First breakpoint from the map
@function get-first-breakpoint($breakpoints: $mq-breakpoints) {
  @return nth(map-keys($breakpoints), 1);
}

/// Check if a breakpoint is the first in the map
///
/// @param {String} $name - Breakpoint name
/// @param {Map} $breakpoints [$mq-breakpoints] - Map of breakpoints
/// @return {Boolean} - True if the passed breakpoint is the first in the map
@function is-first-breakpoint($name, $breakpoints: $mq-breakpoints) {
  @return $name == get-first-breakpoint();
}

/// Check if a breakpoint is the last in the map
///
/// @param {String} $name - Breakpoint name
/// @param {Map} $breakpoints [$mq-breakpoints] - Map of breakpoints
/// @return {Boolean} - True if the passed breakpoint is the last in the map
@function is-last-breakpoint($name, $breakpoints: $mq-breakpoints) {
  @return $name == nth(map-keys($breakpoints), length(map-keys($breakpoints)));
}

/// Check if a map contains valid breakpoints
///
/// @param {Map} $map - Breakpoint map to check
/// @param {Map} $breakpoints [$mq-breakpoints] - Map of valid breakpoints
/// @return {Boolean} - True if the passed map is is a breakpoint map
@function is-breakpoint-map($map, $breakpoints: $mq-breakpoints) {
  $is-breakpoint-map: false;

  @if (type-of($map) == 'map') {
    $is-breakpoint-map: true;

    @each $key in map-keys($map) {
      @if (not map-has-key($breakpoints, $key)) {
        $is-breakpoint-map: false;
      }
    }
  }

  @return $is-breakpoint-map;
}

/// Get the next breakpoint from a map
///
/// @param {String} $name - Current breakpoint name
/// @param {Map} $breakpoints [$mq-breakpoints] - Map of breakpoints
/// @return {String} - Next breakpoint name
@function get-next-breakpoint($name, $breakpoints: $mq-breakpoints) {
  $breakpoint-keys: map-keys($breakpoints);
  $breakpoint-index: index($breakpoint-keys, $name);
  $next: false;

  @if not $breakpoint-index {
    @error "Breakpoint `#{$name}` not found in $breakpoints";
  }

  @if (length($breakpoint-keys) > 1 and $breakpoint-index < length($breakpoint-keys)) {
    $next: nth($breakpoint-keys, $breakpoint-index + 1);
  }

  @return $next;
}
